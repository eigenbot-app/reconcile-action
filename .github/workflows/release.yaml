name: Release
on:
  # 1. Cut a release branch.
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: Semantic Version (major.minor.patch)
  # 2. Release PR/branch is merged, time to tag.
  pull_request:
    types:
      - closed
  # 3. Tag was created, bundle up and release.
  push:
    tags:
      - v*

env:
  VERSION: ${{ github.event.inputs.version }}
  APP_ID: 284028

jobs:
  prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version != '' }}
    steps:
      - uses: tibdex/github-app-token@v1
        id: token
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          permissions: >-
            {"contents": "write", "pull_requests": "write"}

      - uses: actions/checkout@v3
        with:
          token: ${{ steps.token.outputs.token }}

      - run: |
          echo "${{ github.event.inputs.version }}" > VERSION

      - name: File PR
        uses: peter-evans/create-pull-request@v4
        with:
          add-paths: .
          commit-message: "Update version to v${{env.VERSION}}"
          branch: release/v${{env.VERSION}}
          delete-branch: true
          title: "Release v${{env.VERSION}}"
          body: |
            Prepare release for ${{env.VERSION}}.
          token: ${{ steps.token.outputs.token }}

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release') }}
    steps:
      - uses: tibdex/github-app-token@v1
        id: token
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          permissions: >-
            {"contents": "write"}

      - name: Set VERSION from branch
        run: |
          VERSION=${{github.head_ref}}
          echo "VERSION=${VERSION##*/}" >> $GITHUB_ENV

      - name: Checkout repository code
        uses: actions/checkout@v3
        with:
          token: ${{ steps.token.outputs.token }}
          fetch-depth: 0

      - name: Tag
        run: |
          git config --global user.password ${{ steps.token.outputs.token }}
          git tag -d ${{env.VERSION}} 2> /dev/null || echo 'local ref does not exist'
          git push origin :${{env.VERSION}} 2> /dev/null || echo 'remote ref does not exist'
          git tag ${{env.VERSION}}
          git push origin ${{env.VERSION}}

  release:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: tibdex/github-app-token@v1
        id: token
        with:
          app_id: ${{env.APP_ID}}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}
          repository: ${{ github.repository }}
          permissions: >-
            {"contents": "write"}

      - uses: actions/checkout@v3
        with:
          token: ${{ steps.token.outputs.token }}
          fetch-depth: 0

      - name: Sync v1 branch
        run: |
          git fetch origin
          git switch v1
          git merge origin/main
          git push origin v1

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ steps.token.outputs.token }}
